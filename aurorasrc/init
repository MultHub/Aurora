setmetatable(getfenv(), {__index = _G})

shell.setPath(shell.path() .. ":/.aurora")

local native = term.native()
native.isColor = function()
  return true
end
native.isColour = native.isColor

-- make CC use a window anyway
if not term.current().setVisible then
  local w, h = term.getSize()
  term.redirect(window.create(term.current(), 1, 1, w, h, true))
end

local colorMap = { -- generated by super scientific algorithm known as MultHub's eyes
  [1] = colors.white,
  [2] = colors.lightGray,
  [4] = colors.lightGray,
  [8] = colors.lightGray,
  [16] = colors.white,
  [32] = colors.lightGray,
  [64] = colors.white,
  [128] = colors.gray,
  [256] = colors.lightGray,
  [512] = colors.lightGray,
  [1024] = colors.lightGray,
  [2048] = colors.lightGray,
  [4096] = colors.gray,
  [8192] = colors.lightGray,
  [16384] = colors.lightGray,
  [32768] = colors.black,
}

-- monochrome patch, only for native term
if not native.oldSetTC then -- don't break into an infinite loop if re-running init
  native.oldSetTC = native.setTextColor
  native.oldSetBC = native.setBackgroundColor
  native.setTextColor = function(n)
    if not pcall(native.oldSetTC, n) then
      if not pcall(native.oldSetTC, colorMap[n]) then
        native.oldSetTC(colorMap[n] == colors.lightGray and colors.white or colors.black)
      end
    end
  end
  native.setTextColour = native.setTextColor
  native.setBackgroundColor = function(n)
    if not pcall(native.oldSetBC, n) then
      if not pcall(native.oldSetBC, colorMap[n]) then
        native.oldSetBC(colorMap[n] == colors.lightGray and colors.white or colors.black)
      end
    end
  end
  native.setBackgroundColour = native.setBackgroundColor
end

local craftOSVersion = os.version
function os.version()
  return "Aurora: " .. craftOSVersion()
end

local function makeCleanConfig()
  return {
    name = "Aurora",
    debug = false,
    uiPath = ".aurora/ui",
    uiShutdown = true,
    firstboot = true,
  }
end

function loadAPI(path)
  local f = fs.open(path, "r")
  if not f then
    error("File not found", 1)
  end
  local c = f.readAll()
  f.close()
  local fenv = {}
  setmetatable(fenv, {__index = getfenv()})
  setfenv(loadstring(c, fs.getName(path)), fenv)()
  _G[fs.getName(path)] = {}
  for k, v in pairs(fenv) do
    _G[fs.getName(path)][k] = v
  end
end

print("Loading aFile")
loadAPI(".aurora/aFile")

_G.aurora = {
  config = aFile.unserializeFile(".aurora/config") or makeCleanConfig(),
}

function saveConfig()
  aFile.serializeFile(".aurora/config", aurora.config)
end

function reloadConfig()
  aurora.config = aFile.unserializeFile(".aurora/config")
end

for k, v in pairs(makeCleanConfig()) do
  if aurora.config[k] == nil then
    aurora.config[k] = v
  end
end
saveConfig()

print("Loading aUtil")
loadAPI(".aurora/aUtil")

aUtil.doFile(".aurora/vfs")

aUtil.yield()

aUtil.debug("Loading APIs")

local bootAnim = 1
local bootAnimChars = "-\\|/"

for k, v in pairs(fs.list(".aurora/apis")) do
  aUtil.debug("  - \"" .. v .. "\"")
  term.clear()
  aUtil.cwrite("Aurora \"" .. aurora.config.name .. "\"", aUtil.centerY() - 1)
  if aurora.config.debug then
    aUtil.cwrite("Loading " .. v, aUtil.centerY() + 1)
  end
  aUtil.cwrite(bootAnimChars:sub(bootAnim, bootAnim))
  loadAPI(fs.combine(".aurora/apis", v))
  bootAnim = (bootAnim % #bootAnimChars) + 1
  aUtil.yield()
end 

if fs.exists(".aurora/sdk/init") then
  aUtil.doFile(".aurora/sdk/init")
  print("SDK loaded")
end

local isLocked = false

aurora.uiconfig = { -- before UI loads, use these values
  theme = {
    wallpaper = {color = colors.black},
    menubar = {bg = colors.lightGray},
  },
}

function aurora.lock()
  local w, h = term.native().getSize()
  if isLocked or not aurora.config.lockHash or aurora.config.lockHash == "" then
    -- already locked or no password set, don't (re)lock
    return
  end
  local _oldPE = os.pullEvent
  os.pullEvent = os.pullEventRaw
  isLocked = true
  local win = window.create(term.native(), 1, 1, w, h, true)
  local old = term.current()
  term.redirect(win)
  while true do
    term.setBackgroundColor(aurora.uiconfig.theme.wallpaper.color)
    term.clear()
    term.setCursorPos(1, 1)
    term.setTextColor(aurora.uiconfig.theme.menubar.bg == colors.black and colors.white or colors.black)
    term.setBackgroundColor(aurora.uiconfig.theme.menubar.bg)
    term.clearLine()
    aUtil.cwrite("Computer locked", 1)
    term.setBackgroundColor(aurora.uiconfig.theme.wallpaper.color)
    term.setTextColor(aurora.uiconfig.theme.wallpaper.color == colors.black and colors.white or colors.black)
    term.setCursorPos(2, 3)
    term.write("Password:")
    term.setCursorPos(1, 4)
    local inp = read("*")
    if inp ~= "" then
      if aurora.config.lockHash == sha.sha256(inp) then
        isLocked = false
        os.pullEvent = _oldPE
        term.redirect(old)
        return
      else
        sleep(1)
        term.setCursorPos(2, 4)
        term.clearLine()
        term.write("Access denied")
        sleep(1.5)
      end
    end
  end
end

aurora.lock()

local w, h = term.getSize()

term.clear()
aUtil.cwrite("Aurora \"" .. aurora.config.name .. "\"")
aUtil.cwrite("Press [Alt] for startup options", h)

local startupOptions = false
local safeBoot = false

local timer = os.startTimer(1)
while true do
  local ev = {os.pullEventRaw()}
  if ev[1] == "timer" and ev[2] == timer then
    break -- regular boot
  elseif ev[1] == "key" and ev[2] == keys.leftAlt then
    startupOptions = true
    break -- startup options
  end
end

if aurora.config.firstboot then
  aUtil.doFile(".aurora/firstBoot")
end

aUtil.doFile(".aurora/settingsUI")

-- "multitasking"
local _proc = {}
local _killProc = {}
_G.proc = {}
function proc.signal(pid, sig)
  if _proc[pid] then
    coroutine.resume(_proc[pid], "signal", tostring(sig))
    return true
  end
  return false
end
function proc.kill(pid)
  _killProc[pid] = true
end
function proc.launch(fn, name)
  _proc[#_proc + 1] = {
    name = name or "lua",
    co = coroutine.create(setfenv(fn, getfenv())),
  }
  return true
end
function proc.getInfo()
  local t = {}
  for pid, v in pairs(_proc) do
    t[pid] = v.name
  end
  return t
end

local function uiStartup()
  if not aurora.config.uiPath or not fs.exists(aurora.config.uiPath) or fs.isDir(aurora.config.uiPath) then
    term.setCursorPos(1, 1)
    printError("\"uiPath\" not set or invalid, falling back to shell")
    aUtil.doFile("rom/programs/shell")
  else
    local ok, err = aUtil.doFile(aurora.config.uiPath)
    if not ok then
      term.setCursorPos(1, 1)
      printError("UI crashed, falling back to shell - " .. tostring(err))
      aUtil.doFile("rom/programs/shell")
      os.reboot()
    end
  end
  if aurora.config.uiShutdown then
    os.shutdown()
  end
end

if startupOptions then
  local function _redraw()
    term.clear()
    aUtil.cwrite("Startup options", 1)
    aUtil.writeAt(3, 2, "[1] Resume startup")
    aUtil.writeAt(3, 3, "[2] Safe boot, no multitasking")
    aUtil.writeAt(3, 4, "[3] Shell")
    aUtil.writeAt(3, 5, "[4] Power off")
  end
  while true do
    _redraw()
    local ev = {os.pullEventRaw()}
    if ev[1] == "key" then
      if ev[2] == 2 then
        -- resume startup
        break
      elseif ev[2] == 3 then
        -- safe boot
        safeBoot = true
        break
      elseif ev[2] == 4 then
        -- shell
        aUtil.doFile("rom/programs/shell")
        os.reboot()
      elseif ev[2] == 5 then
        os.shutdown()
      end
    end
  end
end

if safeBoot then
  uiStartup()
else
  proc.launch(uiStartup, "init")
  os.queueEvent("multitask")
  while _proc[1] ~= nil do
    local ev = {os.pullEventRaw()}
    for pid, v in pairs(_proc) do
      if not v.filter or ev[1] == "terminate" or v.filter == ev[1] then
        local ok, rtn = coroutine.resume(v.co, unpack(ev))
        if ok then
          v.filter = rtn
        end
      end
      if coroutine.status(v.co) == "dead" then
        _killProc[pid] = true
      end
    end
    for pid in pairs(_killProc) do
      _proc[pid] = nil
    end
    if next(_killProc) then
      _killProc = {}
    end
  end
end
