setmetatable(getfenv(), {__index = _G})

shell.setPath(shell.path() .. ":/.aurora")

term.native().isColor = function()
  return true
end
term.native().isColour = term.isColor

-- make CC use a window anyway
if not term.current().setVisible then
  local w, h = term.getSize()
  term.redirect(window.create(term.current(), 1, 1, w, h, true))
end

local colorMap = { -- generated by super scientific algorithm known as MultHub's eyes
  [1] = colors.white,
  [2] = colors.lightGray,
  [4] = colors.lightGray,
  [8] = colors.lightGray,
  [16] = colors.white,
  [32] = colors.lightGray,
  [64] = colors.white,
  [128] = colors.gray,
  [256] = colors.lightGray,
  [512] = colors.lightGray,
  [1024] = colors.lightGray,
  [2048] = colors.lightGray,
  [4096] = colors.gray,
  [8192] = colors.lightGray,
  [16384] = colors.lightGray,
  [32768] = colors.black,
}

-- monochrome patch, only for native term
if not term.native().oldSetTC then -- don't break into an infinite loop if re-running init
  term.native().oldSetTC = term.native().setTextColor
  term.native().oldSetBC = term.native().setBackgroundColor
  term.native().setTextColor = function(n)
    if not pcall(term.native().oldSetTC, n) then
      if not pcall(term.native().oldSetTC, colorMap[n]) then
        term.native().oldSetTC(colorMap[n] == colors.lightGray and colors.white or colors.black)
      end
    end
  end
  term.native().setTextColour = term.native().setTextColor
  term.native().setBackgroundColor = function(n)
    if not pcall(term.native().oldSetBC, n) then
      if not pcall(term.native().oldSetBC, colorMap[n]) then
        term.native().oldSetBC(colorMap[n] == colors.lightGray and colors.white or colors.black)
      end
    end
  end
  term.native().setBackgroundColour = term.native().setBackgroundColor
end

local craftOSVersion = os.version
function os.version()
  return "Aurora: " .. craftOSVersion()
end

local function makeCleanConfig()
  return {
    name = "Aurora",
    debug = false,
    uiPath = ".aurora/ui",
    uiShutdown = true,
    firstboot = true,
  }
end

function loadAPI(path)
  local f = fs.open(path, "r")
  if not f then
    error("File not found", 1)
  end
  local c = f.readAll()
  f.close()
  local fenv = {}
  setmetatable(fenv, {__index = getfenv()})
  setfenv(loadstring(c, fs.getName(path)), fenv)()
  _G[fs.getName(path)] = {}
  for k, v in pairs(fenv) do
    _G[fs.getName(path)][k] = v
  end
end

print("Loading aFile")
loadAPI(".aurora/aFile")

_G.aurora = {
  config = aFile.unserializeFile(".aurora/config") or makeCleanConfig(),
}

function saveConfig()
  aFile.serializeFile(".aurora/config", aurora.config)
end

function reloadConfig()
  aurora.config = aFile.unserializeFile(".aurora/config")
end

for k, v in pairs(makeCleanConfig()) do
  if aurora.config[k] == nil then
    aurora.config[k] = v
  end
end
saveConfig()

print("Loading aUtil")
loadAPI(".aurora/aUtil")

aUtil.doFile(".aurora/vfs")

aUtil.yield()

aUtil.debug("Loading APIs")

local bootAnim = 1
local bootAnimChars = "-\\|/"

for k, v in pairs(fs.list(".aurora/apis")) do
  aUtil.debug("  - \"" .. v .. "\"")
  term.clear()
  aUtil.cwrite("Aurora \"" .. aurora.config.name .. "\"", aUtil.centerY() - 1)
  if aurora.config.debug then
    aUtil.cwrite("Loading " .. v, aUtil.centerY() + 1)
  end
  aUtil.cwrite(bootAnimChars:sub(bootAnim, bootAnim))
  loadAPI(fs.combine(".aurora/apis", v))
  bootAnim = (bootAnim % #bootAnimChars) + 1
  aUtil.yield()
end 

if fs.exists(".aurora/sdk/init") then
  aUtil.doFile(".aurora/sdk/init")
  print("SDK loaded")
end

term.clear()
aUtil.cwrite("Aurora \"" .. aurora.config.name .. "\"")
aUtil.yield()

if aurora.config.firstboot then
  aUtil.doFile(".aurora/firstBoot")
end

aUtil.doFile(".aurora/settingsUI")

if not aurora.config.uiPath or not fs.exists(aurora.config.uiPath) or fs.isDir(aurora.config.uiPath) then
  term.setCursorPos(1, 1)
  printError("\"uiPath\" not set or invalid, falling back to shell")
  aUtil.doFile("rom/programs/shell")
else
  if not aUtil.doFile(aurora.config.uiPath) then
    term.setCursorPos(1, 1)
    printError("UI crashed, falling back to shell")
    aUtil.doFile("rom/programs/shell")
    os.reboot()
  end
end
if aurora.config.uiShutdown then
  os.shutdown()
end
