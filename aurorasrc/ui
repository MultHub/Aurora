local cachedWallpaper = nil

local updateConfig
local config
local makeUiConfig

function aurora.uiSettings()
  -- old "code" -- aUtil.doFile("rom/programs/edit", "/.aurora/uiConfig")
  local function editText(current, message)
    term.setBackgroundColor(colors.white)
    term.setTextColor(colors.black)
    term.clear()
    term.setCursorPos(1, 1)
    term.setBackgroundColor(colors.lightGray)
    term.clearLine()
    aUtil.cwrite(message, 1)
    term.setBackgroundColor(colors.white)
    term.setCursorPos(2, 3)
    term.write("Current value (UP arrow key): " .. current)
    term.setCursorPos(1, 4)
    term.write("New value: ")
    return read(nil, {current})
  end
  local function colorPicker(current, message)
    local old = current
    current = math.log(current) / math.log(2)
    local function redraw()
      term.setBackgroundColor(colors.white)
      term.setTextColor(colors.black)
      term.clear()
      term.setCursorPos(1, 1)
      term.setBackgroundColor(colors.lightGray)
      term.clearLine()
      aUtil.cwrite(message, 1)
      term.setCursorPos(2, 3)
      for i = 0, 15 do
        term.setBackgroundColor(2^i)
        term.write(i == current and "#" or " ")
      end
      term.setBackgroundColor(colors.white)
      term.setCursorPos(2, 5)
      term.write("Scroll/arrow keys to change the selected color")
      term.setCursorPos(2, 6)
      term.write("Press enter to apply, terminate to cancel")
    end
    while true do
      redraw()
      local ev = {os.pullEventRaw()}
      if ev[1] == "terminate" then
        return old
      elseif ev[1] == "key" and ev[2] == keys.enter then
        return 2^current
      elseif ev[1] == "key" and ev[2] == keys.left then
        current = (current - 1) % 16
      elseif ev[1] == "key" and ev[2] == keys.right then
        current = (current + 1) % 16
      elseif ev[1] == "mouse_scroll" then
        current = (current + ev[2]) % 16
      end
    end
  end
  local ymap = {
    4,
    5,
    6,
    8,
    10,
    13,
    14,
  }
  local sel = 1
  local w, h
  local function redraw()
    w, h = term.getSize()
    term.setBackgroundColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setBackgroundColor(colors.lightGray)
    term.setTextColor(colors.black)
    term.clearLine()
    aUtil.cwrite("UI config", 1)
    term.setBackgroundColor(colors.white)
    term.setCursorPos(2, 3)
    term.write("Menu button")
    term.setCursorPos(4, 4)
    term.write("Text")
    term.setCursorPos(w - #config.text.menubutton, 4)
    term.write(config.text.menubutton)
    term.setCursorPos(4, 5)
    term.write("Inactive")
    term.setCursorPos(w - 6, 5)
    term.setTextColor(config.theme.menubutton.fg1)
    term.setBackgroundColor(config.theme.menubutton.bg1)
    term.write(" Text ")
    term.setTextColor(colors.black)
    term.setBackgroundColor(colors.white)
    term.setCursorPos(4, 6)
    term.write("Active")
    term.setCursorPos(w - 6, 6)
    term.setTextColor(config.theme.menubutton.fg2)
    term.setBackgroundColor(config.theme.menubutton.bg2)
    term.write(" Text ")
    term.setTextColor(colors.black)
    term.setBackgroundColor(colors.white)
    term.setCursorPos(2, 8)
    term.write("Menu bar")
    term.setCursorPos(w - 4, 8)
    term.setBackgroundColor(config.theme.menubar.bg)
    term.write("    ")
    term.setBackgroundColor(colors.white)
    term.setCursorPos(2, 10)
    term.write("Menu items")
    term.setCursorPos(w - 11, 10)
    term.setTextColor(config.theme.menu.fg)
    term.setBackgroundColor(config.theme.menu.bg)
    term.write(" Menu item ")
    term.setTextColor(colors.black)
    term.setBackgroundColor(colors.white)
    term.setCursorPos(2, 12)
    term.write("Wallpaper")
    term.setCursorPos(4, 13)
    term.write("Background color")
    term.setCursorPos(w - 4, 13)
    term.setBackgroundColor(config.theme.wallpaper.color)
    term.write("    ")
    term.setBackgroundColor(colors.white)
    term.setCursorPos(4, 14)
    term.write("Image path")
    term.setCursorPos(w - #config.theme.wallpaper.image.path, 14)
    term.write(config.theme.wallpaper.image.path)
    term.setCursorPos(1, ymap[sel])
    term.write(">")
    term.setCursorPos(1, h - 2)
    term.setBackgroundColor(colors.lightGray)
    term.clearLine()
    term.write("S: save, L: load")
    term.setCursorPos(1, h - 1)
    term.clearLine()
    term.write("Multicolor values: left/right click or 1/2")
    term.setCursorPos(1, h)
    term.clearLine()
    term.write("Q: quit, click: change value")
  end
  local fnEnter = {
    [ymap[1]] = function() -- 4
      config.text.menubutton = editText(config.text.menubutton, "Set menu button text")
    end,
    [ymap[2]] = nil, -- 5
    [ymap[3]] = nil, -- 6
    [ymap[4]] = function() -- 8
      config.theme.menubar.bg = colorPicker(config.theme.menubar.bg, "Menu bar color")
    end,
    [ymap[5]] = nil, -- 10
    [ymap[6]] = function() -- 13
      config.theme.wallpaper.color = colorPicker(config.theme.wallpaper.color, "Background color")
    end,
    [ymap[7]] = function() -- 14
      config.theme.wallpaper.image.path = editText(config.theme.wallpaper.image.path, "Image path, clear to disable")
    end,
  }
  local fn1 = {
    [ymap[1]] = nil, -- 4
    [ymap[2]] = function() -- 5
      config.theme.menubutton.fg1 = colorPicker(config.theme.menubutton.fg1, "Inactive text color")
    end,
    [ymap[3]] = function() -- 6
      config.theme.menubutton.fg2 = colorPicker(config.theme.menubutton.fg2, "Active text color")
    end,
    [ymap[4]] = nil, -- 8
    [ymap[5]] = function() -- 10
      config.theme.menu.fg = colorPicker(config.theme.menu.fg, "Menu text color")
    end,
    [ymap[6]] = nil, -- 13
    [ymap[7]] = nil, -- 14
  }
  local fn2 = {
    [ymap[1]] = nil, -- 4
    [ymap[2]] = function() -- 5
      config.theme.menubutton.bg1 = colorPicker(config.theme.menubutton.bg1, "Inactive background color")
    end,
    [ymap[3]] = function() -- 6
      config.theme.menubutton.bg2 = colorPicker(config.theme.menubutton.bg2, "Active background color")
    end,
    [ymap[4]] = nil, -- 8
    [ymap[5]] = function() -- 10
      config.theme.menu.bg = colorPicker(config.theme.menu.bg, "Menu background color")
    end,
    [ymap[6]] = nil, -- 13
    [ymap[7]] = nil, -- 14
  }
  while true do
    redraw()
    local ev = {os.pullEventRaw()}
    if ev[1] == "terminate" or (ev[1] == "key" and ev[2] == keys.q) then
      break
    elseif ev[1] == "key" then
      if ev[2] == keys.enter then
        if fnEnter[ymap[sel]] then
          fnEnter[ymap[sel]]()
        end
      elseif ev[2] == keys.one then
        if fn1[ymap[sel]] then
          fn1[ymap[sel]]()
        end
      elseif ev[2] == keys.two then
        if fn2[ymap[sel]] then
          fn2[ymap[sel]]()
        end
      elseif ev[2] == keys.l then
        local path
        if aUtil.fileBrowser then
          path = aUtil.fileBrowser("", "Load theme")
        else
          path = editText("", "Load theme")
        end
        if path and fs.exists(path) and not fs.isDir(path) then
          config.theme = aFile.unserializeFile(path)
        end
      elseif ev[2] == keys.s then
        local path
        if aUtil.fileBrowser then
          path = aUtil.fileBrowser("", "Save theme", true)
        else
          path = editText("", "Save theme")
        end
        if path then
          aFile.serializeFile(path, config.theme)
        end
      elseif ev[2] == keys.up then
        sel = (sel - 2) % #ymap + 1
      elseif ev[2] == keys.down then
        sel = sel % #ymap + 1
      end
    elseif ev[1] == "mouse_click" then
      if ev[2] == 1 and fnEnter[ev[4]] then
        fnEnter[ev[4]]()
      elseif ev[2] == 1 and fn1[ev[4]] then
        fn1[ev[4]]()
      elseif ev[2] == 2 and fn2[ev[4]] then
        fn2[ev[4]]()
      end
    end
  end

  cachedWallpaper = nil
  --local newconfig = aFile.unserializeFile(".aurora/uiConfig")
  --if newconfig then
  --  config = updateConfig(newconfig, makeUiConfig())
  --end
  aFile.serializeFile(".aurora/uiConfig", config)
end

local menuItems = {}
local menuWidth = 0
local function refreshMenu()
  menuItems = aFile.unserializeFile(".aurora/menuItems")
  for i, v in ipairs(aFile.unserializeFile(".aurora/userMenu") or {}) do
    table.insert(menuItems, 1, v)
  end
  for i, v in pairs(menuItems) do
    if #v.label > menuWidth then
      menuWidth = #v.label
    end
  end
end

function makeUiConfig()
  return {
    theme = {
      menu = {
        bg = colors.lightGray,
        fg = colors.black,
      },
      menubutton = {
        bg1 = colors.white,
        fg1 = colors.black,
        bg2 = colors.gray,
        fg2 = colors.white,
      },
      menubar = {
        bg = colors.lightGray,
      },
      wallpaper = {
        image = {
          path = ".aurora/wallpaper",
          x = "C",
          y = "C"
        },
        color = colors.white,
      },
    },
    text = {
      menubutton = "Aurora",
    },
  }
end

config = aFile.unserializeFile(".aurora/uiConfig") or {}

local uistate = {
  menuVisible = false,
}

function updateConfig(user, template)
  for k, v in pairs(template) do
    if type(v) == "table" then
      if user[k] == nil then
        user[k] = v
      else
        updateConfig(user[k], v)
      end
    else
      if user[k] == nil then
        user[k] = v
      end
    end
  end
end

updateConfig(config, makeUiConfig())
function aurora.saveUIConfig()
  aFile.serializeFile(".aurora/uiConfig", config)
end
aurora.saveUIConfig()

local function redrawWallpaper()
  local wallpaper = config.theme.wallpaper
  term.setBackgroundColor(wallpaper.color)
  term.clear()
  if wallpaper.image.path ~= "" and fs.exists(wallpaper.image.path) or cachedWallpaper then
    local img = cachedWallpaper or paintutils.loadImage(wallpaper.image.path)
    cachedWallpaper = img
    local height = #img
    local width = 0
    for i = 1, height do
      if #img[i] > width then
        width = #img[i]
      end
    end
    local termw, termh = term.getSize()
    local x = wallpaper.image.x == "C"
    and math.ceil(termw / 2) - math.floor(width / 2)
    or wallpaper.image.x
    local y = wallpaper.image.y == "C"
    and math.ceil(termh / 2) - math.floor(height / 2)
    or wallpaper.image.y
    if x < 0 then
      x = termw + x
    end
    if y < 0 then
      y = termh + y
    end
    paintutils.drawImage(img, x, y)
  end
end

local function redrawMenuButton()
  local menubutton = config.theme.menubutton
  local termw, termh = term.getSize()
  term.setCursorPos(1, termh)
  if uistate.menuVisible then
    term.setTextColor(menubutton.fg2)
    term.setBackgroundColor(menubutton.bg2)
  else
    term.setTextColor(menubutton.fg1)
    term.setBackgroundColor(menubutton.bg1)
  end
  term.write(" " .. config.text.menubutton .. " ")
end

local function redrawMenuBar()
  local menubar = config.theme.menubar
  local termw, termh = term.getSize()
  term.setCursorPos(1, termh)
  term.setBackgroundColor(menubar.bg)
  term.clearLine()
  redrawMenuButton()
end

local function redrawMenu()
  local menu = config.theme.menu
  local termw, termh = term.getSize()
  term.setTextColor(menu.fg)
  term.setBackgroundColor(menu.bg)
  for i, v in ipairs(menuItems) do
    term.setCursorPos(1, termh - (#menuItems - i) - 1)
    term.write((uistate.menuPos == i and ">" or " ") .. v.label .. string.rep(" ", menuWidth - #v.label + 1))
  end
end

local function redraw()
  if not aurora.config.debug and term.current().setVisible then
    term.current().setVisible(false)
  end
  term.setCursorBlink(false)
  redrawWallpaper()
  redrawMenuBar()
  redrawMenuButton()
  if uistate.menuVisible then
    redrawMenu()
  end
  if not aurora.config.debug and term.current().setVisible then
    term.current().setVisible(true)
  end
end

refreshMenu()

while true do
  redraw()
  local ev = {os.pullEventRaw()}
  local termw, termh = term.getSize()
  if ev[1] == "mouse_click" then
    local hasMenuClick = false
    if uistate.menuVisible then
      if ev[3] >= 1 and ev[3] <= menuWidth + 2
      and ev[4] >= termh - #menuItems
      and ev[4] < termh then
        hasMenuClick = true
        menuItems[#menuItems - (termh - ev[4] - 1)].func()
        uistate.menuVisible = false
      end
    end
    if not hasMenuClick then
      if ev[3] >= 1 and ev[3] <= #config.text.menubutton + 2
      and ev[4] == termh then
        uistate.menuVisible = not uistate.menuVisible
        uistate.menuPos = nil
      end
    end
  elseif ev[1] == "key" then
    if ev[2] == keys.leftCtrl then
      uistate.menuVisible = not uistate.menuVisible
      uistate.menuPos = nil
    elseif ev[2] == keys.up then
      uistate.menuPos = ((uistate.menuPos or 1) - 2) % #menuItems + 1
    elseif ev[2] == keys.down then
      uistate.menuPos = (uistate.menuPos or 0) % #menuItems + 1
    elseif ev[2] == keys.enter then
      if uistate.menuVisible then
        if menuItems[uistate.menuPos] then
          menuItems[uistate.menuPos].func()
        end
        uistate.menuVisible = false
      end
    end
  end
end
