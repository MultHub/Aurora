function debug(str)
  if aurora.config.debug then
    aFile.appendFile(".aurora/debug.log", "["..os.clock().."] "..str.."\n")
  end
end

function centerX()
  local w, h = term.getSize()
  return math.ceil(w / 2)
end

function centerY()
  local w, h = term.getSize()
  return math.ceil(h / 2)
end

function cwrite(str, cy)
  local w, h = term.getSize()
  local y = cy or math.ceil(h / 2)
  local x = math.ceil(w / 2) - math.floor(#str / 2)
  term.setCursorPos(x, y)
  term.write(str)
end

function doFile_env(env, path, ...)
  local fn, err = loadfile(path)
  if not fn then
    return false, err
  end
  local fenv = nil
  if env then
    fenv = setmetatable(env, {__index = getfenv()})
  end
  local ok = {pcall(setfenv(fn, fenv or getfenv()), ...)}
  if not ok[1] and aurora.config.debug then
    debug(path.." crashed: "..ok[2])
    term.setBackgroundColor(colors.black)
    printError("Debug: "..ok[2])
    print("Press any key to continue")
  end
  return unpack(ok)
end

function doFile(path, ...)
  return doFile_env(nil, path, ...)
end

function split(str, chr)
  local parts = {}
  local tmp = ""
  for i = 1, #str do
    if str:sub(i, i) == chr then
      table.insert(parts, tmp)
      tmp = ""
    else
      tmp = tmp .. str:sub(i, i)
    end
  end
  table.insert(parts, tmp)
  return parts
end
